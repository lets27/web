/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  productName?: string;
  slug?: Slug;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  relatedProducts?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  stock?: number;
  price?: number;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  stripeCheckoutSessionId?: string;
  stripeCustomerId?: string;
  customerEmail?: string;
  stripePaymentId?: string;
  currency?: string;
  amountDiscount?: number;
  totalPrice?: number;
  status?: "pending" | "paid" | "shipped" | "delivered" | "cancelled";
  orderDate?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Product | Category | Order | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../web/src/lib/queries/queries.ts
// Variable: allProductsQuery
// Query: *[_type == "product"]{  _id,  productName ,  description,  price,  icon,   relatedProducts[]{  // <-- add the spread operator for array of images    _key,    asset->{_id, url} // grab the asset reference so you can use it in urlFor  },  slug,  stock,  category, }
export type AllProductsQueryResult = Array<{
  _id: string;
  productName: string | null;
  description: string | null;
  price: number | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  relatedProducts: Array<{
    _key: string;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  }> | null;
  slug: Slug | null;
  stock: number | null;
  category: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }> | null;
}>;
// Variable: categoriesQuery
// Query: *[_type == "category"]{  _id,  title,  slug,  description}
export type CategoriesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
}>;
// Variable: productBySlugQuery
// Query: *[_type == "product" && slug.current == $slug][0]{  _id,  productName,  description,  price,relatedProducts[]{  // <-- add the spread operator for array of images    _key,    asset->{_id, url} // grab the asset reference so you can use it in urlFor  },  icon,  slug,  stock,  category}
export type ProductBySlugQueryResult = {
  _id: string;
  productName: string | null;
  description: string | null;
  price: number | null;
  relatedProducts: Array<{
    _key: string;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  }> | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: Slug | null;
  stock: number | null;
  category: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }> | null;
} | null;
// Variable: productSearchQuery
// Query: *[_type == "product" && productName match $searchTerm + "*"] | order(productName asc) {    _id,    productName,    description,    price,    icon,    slug,    stock,relatedProducts[]{  // <-- add the spread operator for array of images    _key,    asset->{_id, url} // grab the asset reference so you can use it in urlFor  },    category  }
export type ProductSearchQueryResult = Array<{
  _id: string;
  productName: string | null;
  description: string | null;
  price: number | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: Slug | null;
  stock: number | null;
  relatedProducts: Array<{
    _key: string;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  }> | null;
  category: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }> | null;
}>;
// Variable: productsByCategorySlugQuery
// Query: *[_type == "product" && $slug in category[]->slug.current] | order(productName asc) {    _id,    productName,    description,    price,    icon,    slug,    stock,relatedProducts[]{  // <-- add the spread operator for array of images    _key,    asset->{_id, url} // grab the asset reference so you can use it in urlFor  },    category[]->{      _id,      title,      slug    }  }
export type ProductsByCategorySlugQueryResult = Array<{
  _id: string;
  productName: string | null;
  description: string | null;
  price: number | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  slug: Slug | null;
  stock: number | null;
  relatedProducts: Array<{
    _key: string;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  }> | null;
  category: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
}>;
// Variable: userOrdersQuery
// Query: *[_type == "order" && customerEmail == $email] | order(orderDate desc) {    _id,    _type,    _createdAt,    _updatedAt,    _rev,    orderNumber,    stripeCheckoutSessionId,    stripeCustomerId,    customerEmail,    stripePaymentId,    currency,    amountDiscount,    totalPrice,    status,    orderDate  }
export type UserOrdersQueryResult = Array<{
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber: string | null;
  stripeCheckoutSessionId: string | null;
  stripeCustomerId: string | null;
  customerEmail: string | null;
  stripePaymentId: string | null;
  currency: string | null;
  amountDiscount: number | null;
  totalPrice: number | null;
  status: "cancelled" | "delivered" | "paid" | "pending" | "shipped" | null;
  orderDate: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"product\"]{\n  _id,\n  productName ,\n  description,\n  price,\n  icon,\n   relatedProducts[]{  // <-- add the spread operator for array of images\n    _key,\n    asset->{_id, url} // grab the asset reference so you can use it in urlFor\n  },\n  slug,\n  stock,\n  category, \n}": AllProductsQueryResult;
    "*[_type == \"category\"]{\n  _id,\n  title,\n  slug,\n  description\n}": CategoriesQueryResult;
    "*[_type == \"product\" && slug.current == $slug][0]{\n  _id,\n  productName,\n  description,\n  price,relatedProducts[]{  // <-- add the spread operator for array of images\n    _key,\n    asset->{_id, url} // grab the asset reference so you can use it in urlFor\n  },\n  icon,\n  slug,\n  stock,\n  category\n}": ProductBySlugQueryResult;
    "\n  *[_type == \"product\" && productName match $searchTerm + \"*\"] | order(productName asc) {\n    _id,\n    productName,\n    description,\n    price,\n    icon,\n    slug,\n    stock,relatedProducts[]{  // <-- add the spread operator for array of images\n    _key,\n    asset->{_id, url} // grab the asset reference so you can use it in urlFor\n  },\n    category\n  }\n": ProductSearchQueryResult;
    "\n  *[_type == \"product\" && $slug in category[]->slug.current] | order(productName asc) {\n    _id,\n    productName,\n    description,\n    price,\n    icon,\n    slug,\n    stock,relatedProducts[]{  // <-- add the spread operator for array of images\n    _key,\n    asset->{_id, url} // grab the asset reference so you can use it in urlFor\n  },\n    category[]->{\n      _id,\n      title,\n      slug\n    }\n  }\n": ProductsByCategorySlugQueryResult;
    "\n  *[_type == \"order\" && customerEmail == $email] | order(orderDate desc) {\n    _id,\n    _type,\n    _createdAt,\n    _updatedAt,\n    _rev,\n    orderNumber,\n    stripeCheckoutSessionId,\n    stripeCustomerId,\n    customerEmail,\n    stripePaymentId,\n    currency,\n    amountDiscount,\n    totalPrice,\n    status,\n    orderDate\n  }\n": UserOrdersQueryResult;
  }
}
